import java_cup.runtime.*;
import ast.*;

non terminal Bexp bexp;
non terminal Aexp aexp;
non terminal Stm stm;
non terminal Stm stmList;
non terminal Program program;
non terminal Variable variable;

terminal PLUS, MULT, MINUS, TRUE, FALSE, EQUAL, LESSEQUAL, EXCLAMATION, AND;
terminal ASSIGN, SKIP, SEMICOLON, IF, ELSE, THEN, WHILE, DO, BEGIN, END, PRINT;
terminal LPAREN, RPAREN;
terminal String IDENTIFIER;
terminal Integer INTLITERAL;

precedence left PLUS, MINUS;
precedence left MULT, AND;

program ::= stmList:st {: RESULT = new Program(st); :}
          ;

aexp ::= INTLITERAL:il          {: RESULT = new IntLiteral(il); :}
       | variable:v             {: RESULT = new VariableExp(v); :}
       | aexp:a1 PLUS aexp:a2   {: RESULT = new Add(a1, a2); :}
       | aexp:a1 MULT aexp:a2   {: RESULT = new Mul(a1, a2); :}
       | aexp:a1 MINUS aexp:a2  {: RESULT = new Sub(a1, a2); :}
       | LPAREN aexp:a RPAREN   {: RESULT = a; :}
       ;

bexp ::= TRUE                       {: RESULT = new True(); :}
       | FALSE                      {: RESULT = new False(); :}
       | aexp:a1 EQUAL aexp:a2      {: RESULT = new Equal(a1, a2); :}
       | aexp:a1 LESSEQUAL aexp:a2  {: RESULT = new LessEqual(a1, a2); :}
       | EXCLAMATION bexp:b         {: RESULT = new Not(b); :}
       | bexp:b1 AND bexp:b2        {: RESULT = new And(b1, b2); :}
       | LPAREN bexp:b RPAREN       {: RESULT = b; :}
       ;

stmList ::= stm:st                          {: RESULT = st; :}
          | stm:st1 SEMICOLON stmList:st2   {: RESULT = new Composition(st1, st2); :}
          ;

stm ::= variable:v ASSIGN aexp:a                {: RESULT = new Assignment(v, a); :}
      | SKIP                                    {: RESULT = new Skip(); :}
      | IF LPAREN bexp:b RPAREN THEN stm:st1
                                ELSE stm:st2    {: RESULT = new IfElse(b, st1, st2); :}
      | WHILE LPAREN bexp:b RPAREN DO stm:st    {: RESULT = new While(b, st); :}
      | BEGIN stmList:s END                     {: RESULT = new Block(s); :}
      | PRINT LPAREN aexp:a RPAREN              {: RESULT = new Print(a); :}
      ;

variable ::= IDENTIFIER:i   {: RESULT = new Variable(i); :}
           ;